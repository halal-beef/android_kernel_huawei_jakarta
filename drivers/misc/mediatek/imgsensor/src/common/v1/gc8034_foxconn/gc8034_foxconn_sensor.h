

#ifndef _GC8034_FOXCONN_SENSOR_H
#define _GC8034_FOXCONN_SENSOR_H

#define REG_GAIN_1X 0x20

#define SENSOR_CISCTRL_CAPT_VB_REG_H 0x07
#define SENSOR_CISCTRL_CAPT_VB_REG_L 0x08
#define SENSOR_PAGE_SELECT_REG 0xfe
#define SENSOR_CISCTRL_BUF_EXP_IN_REG_H 0x03
#define SENSOR_CISCTRL_BUF_EXP_IN_REG_L 0x04
#define MAX_AG_INDEX 9
#define AGC_REG_NUM 14
#define MEAG_INDEX 7
#define SENSOR_BASE_GAIN 0x40
#define SENSOR_MAX_GAIN (16 * SENSOR_BASE_GAIN)

#define MAX_DD_NUM 80
#define REGS_GROUP 5
#define REGS_NUM 2

static struct imgsensor_i2c_reg stream_on[] = {
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0xd0, 0x00 },
	{ 0xfe, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg stream_off[] = {
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0x00, 0x00 },
	{ 0xfe, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg init_setting[] = {
	{ 0xf2, 0x00, 0x00 },
	{ 0xf4, 0x80, 0x00 },
	{ 0xf5, 0x19, 0x00 },
	{ 0xf6, 0x44, 0x00 },
	{ 0xf8, 0x63, 0x00 },
	{ 0xfa, 0x45, 0x00 },
	{ 0xf9, 0x00, 0x00 },
	{ 0xf7, 0x95, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0xea, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x03, 0x9a, 0x00 },
	{ 0x18, 0x07, 0x00 },
	{ 0x01, 0x07, 0x00 },
	{ 0xfc, 0xee, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x88, 0x03, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0x00, 0x00 },
	{ 0x03, 0x08, 0x00 },
	{ 0x04, 0xc6, 0x00 },
	{ 0x05, 0x02, 0x00 },
	{ 0x06, 0x16, 0x00 },
	{ 0x07, 0x00, 0x00 },
	{ 0x08, 0x10, 0x00 },
	{ 0x09, 0x00, 0x00 },
	{ 0x0a, 0x3a, 0x00 },
	{ 0x0b, 0x00, 0x00 },
	{ 0x0c, 0x04, 0x00 },
	{ 0x0d, 0x09, 0x00 },
	{ 0x0e, 0xa0, 0x00 },
	{ 0x0f, 0x0c, 0x00 },
	{ 0x10, 0xd4, 0x00 },
	{ 0x17, 0xc0, 0x00 },  // GC8034_MIRROR_NORMAL-->GC8034_MIRROR
	{ 0x18, 0x02, 0x00 },
	{ 0x19, 0x17, 0x00 },
	{ 0x1e, 0x50, 0x00 },
	{ 0x1f, 0x80, 0x00 },
	{ 0x21, 0x4c, 0x00 },
	{ 0x25, 0x00, 0x00 },
	{ 0x28, 0x4a, 0x00 },
	{ 0x2d, 0x89, 0x00 },
	{ 0xca, 0x02, 0x00 },
	{ 0xcb, 0x00, 0x00 },
	{ 0xcc, 0x39, 0x00 },
	{ 0xce, 0xd0, 0x00 },
	{ 0xcf, 0x93, 0x00 },
	{ 0xd0, 0x1b, 0x00 },
	{ 0xd1, 0xaa, 0x00 },
	{ 0xd2, 0xc3, 0x00 },
	{ 0xd8, 0x40, 0x00 },
	{ 0xd9, 0xff, 0x00 },
	{ 0xda, 0x0e, 0x00 },
	{ 0xdb, 0xb0, 0x00 },
	{ 0xdc, 0x0e, 0x00 },
	{ 0xde, 0x08, 0x00 },
	{ 0xe4, 0xc6, 0x00 },
	{ 0xe5, 0x08, 0x00 },
	{ 0xe6, 0x10, 0x00 },
	{ 0xed, 0x2a, 0x00 },
	{ 0xfe, 0x02, 0x00 },
	{ 0x59, 0x02, 0x00 },
	{ 0x5a, 0x04, 0x00 },
	{ 0x5b, 0x08, 0x00 },
	{ 0x5c, 0x20, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x1a, 0x09, 0x00 },
	{ 0x1d, 0x13, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x20, 0x55, 0x00 },
	{ 0x33, 0x83, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0xdf, 0x06, 0x00 },
	{ 0xe7, 0x18, 0x00 },
	{ 0xe8, 0x20, 0x00 },
	{ 0xe9, 0x16, 0x00 },
	{ 0xea, 0x17, 0x00 },
	{ 0xeb, 0x50, 0x00 },
	{ 0xec, 0x6c, 0x00 },
	{ 0xed, 0x9b, 0x00 },
	{ 0xee, 0xd8, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x80, 0x13, 0x00 },
	{ 0x84, 0x01, 0x00 },
	{ 0x89, 0x03, 0x00 },
	{ 0x8d, 0x03, 0x00 },
	{ 0x8f, 0x14, 0x00 },
	{ 0xad, 0x00, 0x00 },
	{ 0xc2, 0x7f, 0x00 },
	{ 0xc3, 0xff, 0x00 },
	{ 0x90, 0x01, 0x00 },
	{ 0x91, 0x00, 0x00 },
	{ 0x92, 0x08, 0x00 },  // GC8034_MIRROR_NORMAL-->GC8034_FullStartY
	{ 0x93, 0x00, 0x00 },
	{ 0x94, 0x09, 0x00 },  // GC8034_MIRROR_NORMAL-->GC8034_FullStartX
	{ 0x95, 0x09, 0x00 },
	{ 0x96, 0x90, 0x00 },
	{ 0x97, 0x0c, 0x00 },
	{ 0x98, 0xc0, 0x00 },
	{ 0xb0, 0x90, 0x00 },
	{ 0xb1, 0x01, 0x00 },
	{ 0xb2, 0x00, 0x00 },
	{ 0xb6, 0x00, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x40, 0x22, 0x00 },
	{ 0x41, 0x20, 0x00 },
	{ 0x42, 0x02, 0x00 },
	{ 0x43, 0x08, 0x00 },
	{ 0x4e, 0x0f, 0x00 },
	{ 0x4f, 0xf0, 0x00 },
	{ 0x58, 0x80, 0x00 },
	{ 0x59, 0x80, 0x00 },
	{ 0x5a, 0x80, 0x00 },
	{ 0x5b, 0x80, 0x00 },
	{ 0x5c, 0x00, 0x00 },
	{ 0x5d, 0x00, 0x00 },
	{ 0x5e, 0x00, 0x00 },
	{ 0x5f, 0x00, 0x00 },
	{ 0x6b, 0x01, 0x00 },
	{ 0x6c, 0x00, 0x00 },
	{ 0x6d, 0x0c, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0xbf, 0x40, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0x68, 0x77, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0x60, 0x00, 0x00 },
	{ 0x61, 0x10, 0x00 },
	{ 0x62, 0x60, 0x00 },
	{ 0x63, 0x30, 0x00 },
	{ 0x64, 0x00, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0xa8, 0x60, 0x00 },
	{ 0xa2, 0xd1, 0x00 },
	{ 0xc8, 0x57, 0x00 },
	{ 0xa1, 0xb8, 0x00 },
	{ 0xa3, 0x91, 0x00 },
	{ 0xc0, 0x50, 0x00 },
	{ 0xd0, 0x05, 0x00 },
	{ 0xd1, 0xb2, 0x00 },
	{ 0xd2, 0x1f, 0x00 },
	{ 0xd3, 0x00, 0x00 },
	{ 0xd4, 0x00, 0x00 },
	{ 0xd5, 0x00, 0x00 },
	{ 0xd6, 0x00, 0x00 },
	{ 0xd7, 0x00, 0x00 },
	{ 0xd8, 0x00, 0x00 },
	{ 0xd9, 0x00, 0x00 },
	{ 0xa4, 0x10, 0x00 },
	{ 0xa5, 0x20, 0x00 },
	{ 0xa6, 0x60, 0x00 },
	{ 0xa7, 0x80, 0x00 },
	{ 0xab, 0x18, 0x00 },
	{ 0xc7, 0xc0, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0xdc, 0x00, 0x00 },
	{ 0xdd, 0x00, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0x20, 0x02, 0x00 },
	{ 0x21, 0x02, 0x00 },
	{ 0x23, 0x42, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x02, 0x02, 0x00 },
	{ 0x04, 0x80, 0x00 },
	{ 0x11, 0x2b, 0x00 },
	{ 0x12, 0xf0, 0x00 },
	{ 0x13, 0x0f, 0x00 },
	{ 0x15, 0x10, 0x00 },
	{ 0x16, 0x29, 0x00 },
	{ 0x17, 0xff, 0x00 },
	{ 0x19, 0xaa, 0x00 },
	{ 0x1a, 0x02, 0x00 },
	{ 0x21, 0x05, 0x00 },
	{ 0x22, 0x06, 0x00 },
	{ 0x23, 0x2b, 0x00 },
	{ 0x24, 0x00, 0x00 },
	{ 0x25, 0x12, 0x00 },
	{ 0x26, 0x07, 0x00 },
	{ 0x29, 0x07, 0x00 },
	{ 0x2a, 0x12, 0x00 },
	{ 0x2b, 0x07, 0x00 },
	{ 0xfe, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg preview_setting[] = {
	{ 0xf2, 0x00, 0x00 },
	{ 0xf4, 0x80, 0x00 },
	{ 0xf5, 0x19, 0x00 },
	{ 0xf6, 0x44, 0x00 },
	{ 0xf8, 0x63, 0x00 },
	{ 0xfa, 0x45, 0x00 },
	{ 0xf9, 0x00, 0x00 },
	{ 0xf7, 0x9d, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0xea, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x03, 0x9a, 0x00 },
	{ 0x18, 0x07, 0x00 },
	{ 0x01, 0x07, 0x00 },
	{ 0xfc, 0xee, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0x00, 0x00 },
	{ 0x08, 0x10, 0x00 },
	{ 0x09, 0x00, 0x00 },
	{ 0x0a, 0x3a, 0x00 },
	{ 0x0d, 0x09, 0x00 },
	{ 0x0e, 0xa0, 0x00 },
	{ 0x17, 0xc0, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x80, 0x10, 0x00 },
	{ 0xad, 0x30, 0x00 },
	{ 0x66, 0x2c, 0x00 },
	{ 0xbc, 0x49, 0x00 },
	{ 0x90, 0x01, 0x00 },
	{ 0x91, 0x00, 0x00 },
	{ 0x92, 0x04, 0x00 },
	{ 0x93, 0x00, 0x00 },
	{ 0x94, 0x05, 0x00 },
	{ 0x95, 0x04, 0x00 },
	{ 0x96, 0xc8, 0x00 },
	{ 0x97, 0x06, 0x00 },
	{ 0x98, 0x60, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0x62, 0x28, 0x00 },
	{ 0x63, 0x10, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0xd3, 0x00, 0x00 },
	{ 0xd4, 0x00, 0x00 },
	{ 0xd7, 0x00, 0x00 },
	{ 0xdc, 0x00, 0x00 },
	{ 0xdd, 0x00, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x02, 0x02, 0x00 },
	{ 0x04, 0x80, 0x00 },
	{ 0x11, 0x2b, 0x00 },
	{ 0x12, 0xf8, 0x00 },
	{ 0x13, 0x07, 0x00 },
	{ 0x15, 0x10, 0x00 },
	{ 0x16, 0x29, 0x00 },
	{ 0x17, 0xff, 0x00 },
	{ 0x19, 0xaa, 0x00 },
	{ 0x1a, 0x02, 0x00 },
	{ 0x21, 0x02, 0x00 },
	{ 0x22, 0x03, 0x00 },
	{ 0x23, 0x0a, 0x00 },
	{ 0x24, 0x00, 0x00 },
	{ 0x25, 0x12, 0x00 },
	{ 0x26, 0x04, 0x00 },
	{ 0x29, 0x04, 0x00 },
	{ 0x2a, 0x02, 0x00 },
	{ 0x2b, 0x04, 0x00 },
	{ 0xfe, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg capture_setting[] = {
	{ 0xf2, 0x00, 0x00 },
	{ 0xf4, 0x80, 0x00 },
	{ 0xf5, 0x19, 0x00 },
	{ 0xf6, 0x44, 0x00 },
	{ 0xf8, 0x63, 0x00 },
	{ 0xfa, 0x45, 0x00 },
	{ 0xf9, 0x00, 0x00 },
	{ 0xf7, 0x95, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0xea, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x03, 0x9a, 0x00 },
	{ 0x18, 0x07, 0x00 },
	{ 0x01, 0x07, 0x00 },
	{ 0xfc, 0xee, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0x00, 0x00 },
	{ 0x08, 0x10, 0x00 },
	{ 0x09, 0x00, 0x00 },
	{ 0x0a, 0x3a, 0x00 },
	{ 0x0d, 0x09, 0x00 },
	{ 0x0e, 0xa0, 0x00 },
	{ 0x17, 0xc0, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x80, 0x13, 0x00 },
	{ 0xad, 0x00, 0x00 },
	{ 0x90, 0x01, 0x00 },
	{ 0x91, 0x00, 0x00 },
	{ 0x92, 0x08, 0x00 },
	{ 0x93, 0x00, 0x00 },
	{ 0x94, 0x09, 0x00 },
	{ 0x95, 0x09, 0x00 },
	{ 0x96, 0x90, 0x00 },
	{ 0x97, 0x0c, 0x00 },
	{ 0x98, 0xc0, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0x62, 0x60, 0x00 },
	{ 0x63, 0x30, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0xd3, 0x00, 0x00 },
	{ 0xd4, 0x00, 0x00 },
	{ 0xd7, 0x00, 0x00 },
	{ 0xdc, 0x00, 0x00 },
	{ 0xdd, 0x00, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x02, 0x02, 0x00 },
	{ 0x04, 0x80, 0x00 },
	{ 0x11, 0x2b, 0x00 },
	{ 0x12, 0xf0, 0x00 },
	{ 0x13, 0x0f, 0x00 },
	{ 0x15, 0x10, 0x00 },
	{ 0x16, 0x29, 0x00 },
	{ 0x17, 0xff, 0x00 },
	{ 0x19, 0xaa, 0x00 },
	{ 0x1a, 0x02, 0x00 },
	{ 0x21, 0x05, 0x00 },
	{ 0x22, 0x06, 0x00 },
	{ 0x23, 0x2b, 0x00 },
	{ 0x24, 0x00, 0x00 },
	{ 0x25, 0x12, 0x00 },
	{ 0x26, 0x07, 0x00 },
	{ 0x29, 0x07, 0x00 },
	{ 0x2a, 0x12, 0x00 },
	{ 0x2b, 0x07, 0x00 },
	{ 0xfe, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg video_setting[] = {
	{ 0xf2, 0x00, 0x00 },
	{ 0xf4, 0x80, 0x00 },
	{ 0xf5, 0x19, 0x00 },
	{ 0xf6, 0x44, 0x00 },
	{ 0xf8, 0x63, 0x00 },
	{ 0xfa, 0x45, 0x00 },
	{ 0xf9, 0x00, 0x00 },
	{ 0xf7, 0x95, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0xea, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x03, 0x9a, 0x00 },
	{ 0x18, 0x07, 0x00 },
	{ 0x01, 0x07, 0x00 },
	{ 0xfc, 0xee, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0x00, 0x00 },
	{ 0x08, 0x10, 0x00 },
	{ 0x09, 0x00, 0x00 },
	{ 0x0a, 0x3a, 0x00 },
	{ 0x0d, 0x09, 0x00 },
	{ 0x0e, 0xa0, 0x00 },
	{ 0x17, 0xc0, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x80, 0x13, 0x00 },
	{ 0xad, 0x00, 0x00 },
	{ 0x90, 0x01, 0x00 },
	{ 0x91, 0x00, 0x00 },
	{ 0x92, 0x08, 0x00 },
	{ 0x93, 0x00, 0x00 },
	{ 0x94, 0x09, 0x00 },
	{ 0x95, 0x09, 0x00 },
	{ 0x96, 0x90, 0x00 },
	{ 0x97, 0x0c, 0x00 },
	{ 0x98, 0xc0, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0x62, 0x60, 0x00 },
	{ 0x63, 0x30, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0xd3, 0x00, 0x00 },
	{ 0xd4, 0x00, 0x00 },
	{ 0xd7, 0x00, 0x00 },
	{ 0xdc, 0x00, 0x00 },
	{ 0xdd, 0x00, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x02, 0x02, 0x00 },
	{ 0x04, 0x80, 0x00 },
	{ 0x11, 0x2b, 0x00 },
	{ 0x12, 0xf0, 0x00 },
	{ 0x13, 0x0f, 0x00 },
	{ 0x15, 0x10, 0x00 },
	{ 0x16, 0x29, 0x00 },
	{ 0x17, 0xff, 0x00 },
	{ 0x19, 0xaa, 0x00 },
	{ 0x1a, 0x02, 0x00 },
	{ 0x21, 0x05, 0x00 },
	{ 0x22, 0x06, 0x00 },
	{ 0x23, 0x2b, 0x00 },
	{ 0x24, 0x00, 0x00 },
	{ 0x25, 0x12, 0x00 },
	{ 0x26, 0x07, 0x00 },
	{ 0x29, 0x07, 0x00 },
	{ 0x2a, 0x12, 0x00 },
	{ 0x2b, 0x07, 0x00 },
	{ 0xfe, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg otp_init_setting[] = {
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xf2, 0x00, 0x00 }, /* [0]otp clk */
	{ 0xf4, 0x80, 0x00 }, /* [3]otp en */
	{ 0xf5, 0x19, 0x00 },
	{ 0xf6, 0x44, 0x00 },
	{ 0xf7, 0x97, 0x00 },
	{ 0xf8, 0x63, 0x00 },
	{ 0xfa, 0x45, 0x00 },
	{ 0xf9, 0x00, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0xea, 0x00 },
	{ 0xfc, 0xee, 0x00 },
};

struct gc8034_dd_t {
	kal_uint16 x;
	kal_uint16 y;
	kal_uint16 t;
};

struct gc8034_otp_t {
	kal_uint8 dd_cnt;
	kal_uint8 dd_flag;
	struct gc8034_dd_t dd_param[2 * MAX_DD_NUM];
	kal_uint8 reg_flag;
	kal_uint8 reg_num;
	kal_uint8 reg_page[REGS_GROUP * REGS_NUM];
	kal_uint8 reg_addr[REGS_GROUP * REGS_NUM];
	kal_uint8 reg_value[REGS_GROUP * REGS_NUM];
	kal_uint8 product_level;
};

enum {
	OTP_CLOSE = 0,
	OTP_OPEN,
};

enum {
	OTP_PAGE0 = 0,
	OTP_PAGE1,
	OTP_PAGE2,
};

static imgsensor_i2c_reg_setting_t otp_init_setting_array = {
	.setting = otp_init_setting,
	.size = IMGSENSOR_ARRAY_SIZE(otp_init_setting),
	.addr_type = IMGSENSOR_I2C_WORD_ADDR,
	.data_type = IMGSENSOR_I2C_BYTE_DATA,
	.delay = 0,
};

static struct imgsensor_i2c_reg_table dump_setting[] = {
	{ 0xfe, 0x00, IMGSENSOR_I2C_BYTE_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x00, 0x00, IMGSENSOR_I2C_BYTE_DATA, IMGSENSOR_I2C_READ, 0 },
};

static imgsensor_info_t imgsensor_info = {
	.sensor_id_reg = 0xf0,
	.sensor_id = GC8034_FOXCONN_SENSOR_ID,  // Sensor ID Value: 0x8044//record sensor id defined in Kd_imgsensor.h
	.checksum_value = 0x1b375588,  // checksum value for Camera Auto Test

	.pre = {
		.pclk = 320000000,  // record different mode's pclk
		.linelength = 4272,  // record different mode's linelength
		.framelength = 2500,  // record different mode's framelength
		.startx = 0,  // record different mode's startx of grabwindow
		.starty = 0,  // record different mode's starty of grabwindow
		.grabwindow_width = 1632,  // record different mode's width of grabwindow
		.grabwindow_height = 1224,  // record different mode's height of grabwindow
		/* following for MIPIDataLowPwr2HighSpeedSettleDelayCount by different scenario */
		.mipi_data_lp2hs_settle_dc = 85,
		/* following for GetDefaultFramerateByScenario() */
		.max_framerate = 300,
		.mipi_pixel_rate = 134400000,
	},

	.cap = {
		.pclk = 320000000,  // record different mode's pclk
		.linelength = 4272,  // record different mode's linelength
		.framelength = 2500,  // record different mode's framelength
		.startx = 0,  // record different mode's startx of grabwindow
		.starty = 0,  // record different mode's starty of grabwindow
		.grabwindow_width = 3264,  // record different mode's width of grabwindow
		.grabwindow_height = 2448,  // record different mode's height of grabwindow
		/* following for MIPIDataLowPwr2HighSpeedSettleDelayCount by different scenario */
		.mipi_data_lp2hs_settle_dc = 85,
		/* following for GetDefaultFramerateByScenario() */
		.max_framerate = 300,
		.mipi_pixel_rate = 268800000,
	},

	.normal_video = {
		.pclk = 320000000,  // record different mode's pclk
		.linelength = 4272,  // record different mode's linelength
		.framelength = 2500,  // record different mode's framelength
		.startx = 0,  // record different mode's startx of grabwindow
		.starty = 0,  // record different mode's starty of grabwindow
		.grabwindow_width = 3264,  // record different mode's width of grabwindow
		.grabwindow_height = 2448,  // record different mode's height of grabwindow
		/* following for MIPIDataLowPwr2HighSpeedSettleDelayCount by different scenario */
		.mipi_data_lp2hs_settle_dc = 85,
		/* following for GetDefaultFramerateByScenario() */
		.max_framerate = 300,
		.mipi_pixel_rate = 268800000,
	},

	.init_setting = {
		.setting = init_setting,
		.size = IMGSENSOR_ARRAY_SIZE(init_setting),
		.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.pre_setting = {
		.setting = preview_setting,
		.size = IMGSENSOR_ARRAY_SIZE(preview_setting),
		.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 10,
	},
	.cap_setting = {
		.setting = capture_setting,
		.size = IMGSENSOR_ARRAY_SIZE(capture_setting),
		.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.normal_video_setting = {
		.setting = video_setting,
		.size = IMGSENSOR_ARRAY_SIZE(video_setting),
		.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.streamon_setting = {
		.setting = stream_on,
		.size = IMGSENSOR_ARRAY_SIZE(stream_on),
		.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 10,
	},

	.streamoff_setting = {
		.setting = stream_off,
		.size = IMGSENSOR_ARRAY_SIZE(stream_off),
		.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 10,
	},

	.dump_info = {
		.setting = dump_setting,
		.size = IMGSENSOR_ARRAY_SIZE(dump_setting),
	},

	.margin = 4,  // sensor framelength & shutter margin
	.min_shutter = 4,  // min shutter
	.max_frame_length = 0x29FF,  // max framelength by sensor register's limitation
	.ae_shut_delay_frame = 0,  // shutter delay frame for AE cycle, 2 frame with ispGain_delay-shut_delay=2-0=2
	.ae_sensor_gain_delay_frame = 0,  // sensor gain delay frame for AE cycle,2 frame with ispGain_delay-sensor_gain_delay=2-0=2
	.ae_ispGain_delay_frame = 2,  // isp gain delay frame for AE cycle
	.ihdr_support = 0,  // 1, support; 0,not support
	.ihdr_le_firstline = 0,  // 1,le first ; 0, se first
	.sensor_mode_num = 3,  // support sensor mode num ,don't support Slow motion

	.cap_delay_frame = 2,  // enter capture delay frame num
	.pre_delay_frame = 2,  // enter preview delay frame num
	.video_delay_frame = 2,  // enter video delay frame num
	.hs_video_delay_frame = 2,  // enter high speed video  delay frame num
	.slim_video_delay_frame = 2,  // enter slim video delay frame num

	.isp_driving_current = ISP_DRIVING_4MA,  // mclk driving current
	.sensor_interface_type = SENSOR_INTERFACE_TYPE_MIPI,  // sensor_interface_type
	.mipi_sensor_type = MIPI_OPHY_NCSI2,  // 0,MIPI_OPHY_NCSI2;  1,MIPI_OPHY_CSI2
	.mipi_settle_delay_mode = 0,  // 0,MIPI_SETTLEDELAY_AUTO; 1,MIPI_SETTLEDELAY_MANNUAL
	.sensor_output_dataformat = SENSOR_OUTPUT_FORMAT_RAW_R,  // sensor output first pixel color
	.mclk = 24,  // mclk value, suggest 24 or 26 for 24Mhz or 26Mhz
	.mipi_lane_num = SENSOR_MIPI_4_LANE,  // mipi lane num
	.i2c_addr_table = { 0x6e, 0xff },  // record sensor support all write id addr, only supprt 4must end with 0xff
	.i2c_speed = 400,  // i2c read/write speed
	.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
};

static imgsensor_t imgsensor = {
	.mirror = IMAGE_NORMAL,  // mirrorflip information
	.sensor_mode = IMGSENSOR_MODE_INIT,  // IMGSENSOR_MODE enum value,record current sensor mode,such as: INIT, Preview, Capture, Video,High Speed Video, Slim Video
	.shutter = 0x3ED,  // current shutter
	.gain = 0x40,  // current gain
	.dummy_pixel = 0,  // current dummypixel
	.dummy_line = 0,  // current dummyline
	.current_fps = 300,  // full size current fps : 24fps for PIP, 30fps for Normal or ZSD
	.autoflicker_en = KAL_FALSE,  // auto flicker enable: KAL_FALSE for disable auto flicker, KAL_TRUE for enable auto flicker
	.test_pattern = KAL_FALSE,  // test pattern mode or not. KAL_FALSE for in test pattern mode, KAL_TRUE for normal output
	.current_scenario_id = MSDK_SCENARIO_ID_CAMERA_PREVIEW,  // current scenario id
	.ihdr_en = KAL_FALSE,  // sensor need support LE, SE with HDR feature
	.i2c_write_id = 0x6e,  // record current sensor's i2c write id
};

/* Sensor output window information */
static struct SENSOR_WINSIZE_INFO_STRUCT imgsensor_winsize_info[] = {
	/* preview */
	{
		.full_w = 3264,
		.full_h = 2448,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 3264,
		.h0_size = 2448,
		.scale_w = 1632,
		.scale_h = 1224,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 1632,
		.h1_size = 1224,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 1632,
		.h2_tg_size = 1224,
	},
	/* capture */
	{
		.full_w = 3264,
		.full_h = 2448,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 3264,
		.h0_size = 2448,
		.scale_w = 3264,
		.scale_h = 2448,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 3264,
		.h1_size = 2448,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 3264,
		.h2_tg_size = 2448,
	},
	/* video */
	{
		.full_w = 3264,
		.full_h = 2448,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 3264,
		.h0_size = 2448,
		.scale_w = 3264,
		.scale_h = 2448,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 3264,
		.h1_size = 2448,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 3264,
		.h2_tg_size = 2448,
	},
};
#endif
