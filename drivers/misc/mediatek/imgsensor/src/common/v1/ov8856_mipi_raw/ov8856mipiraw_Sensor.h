/*
 * Copyright (C) 2015 MediaTek Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 */

#ifndef _OV8856MIPI_SENSOR_H
#define _OV8856MIPI_SENSOR_H

#define SENSOR_HTS_REG_H  0x380c
#define SENSOR_HTS_REG_L  0x380d
#define SENSOR_VTS_REG_H  0x380e
#define SENSOR_VTS_REG_L  0x380f
#define SENSOR_LONG_EXPO_REG_H  0x3500
#define SENSOR_LONG_EXPO_REG_M  0x3501
#define SENSOR_LONG_EXPO_REG_L  0x3502
#define SENSOR_LONG_GAIN_REG_H 0x3508
#define SENSOR_LONG_GAIN_REG_L 0x3509
#define SENSOR_SHORT_EXPO_REG_H  0x3510
#define SENSOR_SHORT_EXPO_REG_M  0x3511
#define SENSOR_SHORT_EXPO_REG_L  0x3512
#define SENSOR_TIMEING_CTRL_FORMAT1 0x3820
#define SENSOR_TIMEING_CTRL_FORMAT2 0x3821
#define SENSOR_ISP_CTRL_L2E         0x502e
#define SENSOR_ISP_CTRL_00          0x5000
#define SENSOR_ISP_CTRL_01          0x5001
#define SENSOR_ISP_CTRL_04          0x5004
#define SENSOR_PRE_CTRL_00          0x5e00
#define SENSOR_ISP_CTRL_FORMAT      0x376b
#define SENSOR_STREAM_REG           0x0100
#define SENSOR_CHIP_ID_H  0x302A
#define SENSOR_CHIP_ID_M  0x300B
#define SENSOR_CHIP_ID_L  0x300C
#define SENSOR_INIT_SHUTTER_DEFAULT   0x2D00
#define SENSOR_INIT_GAIN_DEFAULT   0x100

kal_uint16 addr_data_pair_init_ov8856[] = {
	0x0103, 0x01,
	0x0302, 0x3c,
	0x0303, 0x01,
	0x031e, 0x0c,
	0x3000, 0x00,
	0x300e, 0x00,
	0x3010, 0x00,
	0x3015, 0x84,
	0x3018, 0x72,
	0x3033, 0x24,
	0x3500, 0x00,
	0x3501, 0x4c,
	0x3502, 0xe0,
	0x3503, 0x08,
	0x3505, 0x83,
	0x3508, 0x01,
	0x3509, 0x80,
	0x350c, 0x00,
	0x350d, 0x80,
	0x350e, 0x04,
	0x350f, 0x00,
	0x3510, 0x00,
	0x3511, 0x02,
	0x3512, 0x00,
	0x3600, 0x72,
	0x3601, 0x40,
	0x3602, 0x30,
	0x3610, 0xc5,
	0x3611, 0x58,
	0x3612, 0x5c,
	0x3613, 0x5a,
	0x3614, 0x60,
	0x3628, 0xff,
	0x3629, 0xff,
	0x362a, 0xff,
	0x3633, 0x10,
	0x3634, 0x10,
	0x3635, 0x10,
	0x3636, 0x10,
	0x3663, 0x08,
	0x3669, 0x34,
	0x366e, 0x08,
	0x3706, 0x86,
	0x370b, 0x7e,
	0x59f8, 0x3d,
	0x3714, 0x27,
	0x3730, 0x12,
	0x3733, 0x10,
	0x3764, 0x00,
	0x3765, 0x00,
	0x3769, 0x62,
	0x376a, 0x2a,
	0x376b, 0x30,
	0x3780, 0x00,
	0x3781, 0x24,
	0x3782, 0x00,
	0x3783, 0x23,
	0x3798, 0x2f,
	0x37a1, 0x60,
	0x37a8, 0x6a,
	0x37ab, 0x3f,
	0x37c2, 0x14,
	0x37c3, 0xf1,
	0x37c9, 0x80,
	0x37cb, 0x03,
	0x37cc, 0x0a,
	0x37cd, 0x16,
	0x37ce, 0x1f,
	0x3800, 0x00,
	0x3801, 0x00,
	0x3802, 0x00,
	0x3803, 0x0c,
	0x3804, 0x0c,
	0x3805, 0xdf,
	0x3806, 0x09,
	0x3807, 0xa3,
	0x3808, 0x06,
	0x3809, 0x60,
	0x380a, 0x04,
	0x380b, 0xc8,
	0x380c, 0x07,
	0x380d, 0x8c,
	0x380e, 0x09,
	0x380f, 0xb2,
	0x3810, 0x00,
	0x3811, 0x08,
	0x3812, 0x00,
	0x3813, 0x02,
	0x3814, 0x03,
	0x3815, 0x01,
	0x3816, 0x00,
	0x3817, 0x00,
	0x3818, 0x00,
	0x3819, 0x00,
	0x3820, 0x90,
	0x3821, 0x67,
	0x382a, 0x03,
	0x382b, 0x01,
	0x3830, 0x06,
	0x3836, 0x02,
	0x3862, 0x04,
	0x3863, 0x08,
	0x3cc0, 0x33,
	0x3d85, 0x17,
	0x3d8c, 0x73,
	0x3d8d, 0xde,
	0x4001, 0xe0,
	0x4003, 0x40,
	0x4008, 0x00,
	0x4009, 0x05,
	0x400f, 0x80,
	0x4010, 0xf0,
	0x4011, 0xff,
	0x4012, 0x02,
	0x4013, 0x01,
	0x4014, 0x01,
	0x4015, 0x01,
	0x4042, 0x00,
	0x4043, 0x80,
	0x4044, 0x00,
	0x4045, 0x80,
	0x4046, 0x00,
	0x4047, 0x80,
	0x4048, 0x00,
	0x4049, 0x80,
	0x4041, 0x03,
	0x404c, 0x20,
	0x404d, 0x00,
	0x404e, 0x20,
	0x4203, 0x80,
	0x4307, 0x30,
	0x4317, 0x00,
	0x4503, 0x08,
	0x4601, 0x80,
	0x4816, 0x53,
	0x481b, 0x58,
	0x481f, 0x27,
	0x4837, 0x16,
	0x5000, 0x77,
	0x5001, 0x0a,
	0x5004, 0x04,
	0x502e, 0x03,
	0x5030, 0x41,
	0x5795, 0x00,
	0x5796, 0x10,
	0x5797, 0x10,
	0x5798, 0x73,
	0x5799, 0x73,
	0x579a, 0x00,
	0x579b, 0x28,
	0x579c, 0x00,
	0x579d, 0x16,
	0x579e, 0x06,
	0x579f, 0x20,
	0x57a0, 0x04,
	0x57a1, 0xa0,
	0x5780, 0x14,
	0x5781, 0x0f,
	0x5782, 0x44,
	0x5783, 0x02,
	0x5784, 0x01,
	0x5785, 0x01,
	0x5786, 0x00,
	0x5787, 0x04,
	0x5788, 0x02,
	0x5789, 0x0f,
	0x578a, 0xfd,
	0x578b, 0xf5,
	0x578c, 0xf5,
	0x578d, 0x03,
	0x578e, 0x08,
	0x578f, 0x0c,
	0x5790, 0x08,
	0x5791, 0x04,
	0x5792, 0x00,
	0x5793, 0x52,
	0x5794, 0xa3,
	0x5a08, 0x02,
	0x5b00, 0x02,
	0x5b01, 0x10,
	0x5b02, 0x03,
	0x5b03, 0xcf,
	0x5b05, 0x6c,
	0x5e00, 0x00,
};

kal_uint16 addr_data_pair_preview_ov8856[] = {
	0x3501, 0x4c,
	0x3502, 0xe0,
	0x366e, 0x08,
	0x3714, 0x27,
	0x37c2, 0x14,
	0x3800, 0x00,
	0x3801, 0x00,
	0x3802, 0x00,
	0x3803, 0x0c,
	0x3804, 0x0c,
	0x3805, 0xdf,
	0x3806, 0x09,
	0x3807, 0xa3,
	0x3808, 0x06,
	0x3809, 0x60,
	0x380a, 0x04,
	0x380b, 0xc8,
	0x380c, 0x07,
	0x380d, 0x8c,
	0x380e, 0x09,
	0x380f, 0xb2,
	0x3810, 0x00,
	0x3811, 0x02,
	0x3812, 0x00,
	0x3813, 0x02,
	0x3814, 0x03,

	/*improve the normal luminance differences  90->80  11182015*/
	0x3820, 0x80,
	/*improve the normal luminance differences67->47  11182015*/
	0x3821, 0x47,
/*improve the normal luminance differences new add for set back to default*/
	0x4502, 0x50,

	0x382a, 0x03,
	0x4009, 0x05,
	0x4601, 0x80,
	0x5795, 0x00,
	0x5796, 0x10,
	0x5797, 0x10,
	0x5798, 0x73,
	0x5799, 0x73,
	0x579a, 0x00,
	0x579b, 0x28,
	0x579c, 0x00,
	0x579d, 0x16,
	0x579e, 0x06,
	0x579f, 0x20,
	0x57a0, 0x04,
	0x57a1, 0xa0,
	0x366d, 0x00,
	0x5003, 0xc8,
	0x5006, 0x00,
	0x5007, 0x00,
	0x5e10, 0xfc,
};

kal_uint16 addr_data_pair_capture_30fps_ov8856[] = {
	0x3501, 0x9a,
	0x3502, 0x20,
	0x366e, 0x10,
	0x3714, 0x23,
	0x37c2, 0x04,
	0x3800, 0x00,
	0x3801, 0x00,
	0x3802, 0x00,
	0x3803, 0x0c,
	0x3804, 0x0c,
	0x3805, 0xdf,
	0x3806, 0x09,
	0x3807, 0xa3,
	0x3808, 0x0c,
	0x3809, 0xc0,
	0x380a, 0x09,
	0x380b, 0x90,
	0x380c, 0x07,
	0x380d, 0x8c,
	0x380e, 0x09,
	0x380f, 0xb2,
	0x3810, 0x00,
	0x3811, 0x04,
	0x3812, 0x00,
	0x3813, 0x02,
	0x3814, 0x01,
	0x3820, 0x80,
	0x3821, 0x46,
/*improve the normal luminance differences new add for set back to default*/
	0x4502, 0x50,

	0x382a, 0x01,
	0x4009, 0x0b,
	0x4601, 0x80,
	0x5795, 0x02,
	0x5796, 0x20,
	0x5797, 0x20,
	0x5798, 0xd5,
	0x5799, 0xd5,
	0x579a, 0x00,
	0x579b, 0x50,
	0x579c, 0x00,
	0x579d, 0x2c,
	0x579e, 0x0c,
	0x579f, 0x40,
	0x57a0, 0x09,
	0x57a1, 0x40,
	0x366d, 0x00,
	0x5003, 0xc8,
	0x5006, 0x00,
	0x5007, 0x00,
	0x5e10, 0xfc,
};

kal_uint16 addr_data_pair_capture_15fps_ov8856[] = {
	0x3501, 0x9a,
	0x3502, 0x20,
	0x366e, 0x10,
	0x3714, 0x23,
	0x37c2, 0x04,
	0x3800, 0x00,
	0x3801, 0x00,
	0x3802, 0x00,
	0x3803, 0x0c,
	0x3804, 0x0c,
	0x3805, 0xdf,
	0x3806, 0x09,
	0x3807, 0xa3,
	0x3808, 0x0c,
	0x3809, 0xc0,
	0x380a, 0x09,
	0x380b, 0x90,
	0x380c, 0x07,
	0x380d, 0x8c,
	0x380e, 0x13,/*;09*/
	0x380f, 0x64,/*;b2*/
	0x3810, 0x00,
	0x3811, 0x04,
	0x3812, 0x00,
	0x3813, 0x02,
	0x3814, 0x01,
	0x3820, 0x80,
	0x3821, 0x46,
/*improve the normal luminance differences new add for set back to default*/
	0x4502, 0x50,

	0x382a, 0x01,
	0x4009, 0x0b,
	0x4601, 0x80,
	0x5795, 0x02,
	0x5796, 0x20,
	0x5797, 0x20,
	0x5798, 0xd5,
	0x5799, 0xd5,
	0x579a, 0x00,
	0x579b, 0x50,
	0x579c, 0x00,
	0x579d, 0x2c,
	0x579e, 0x0c,
	0x579f, 0x40,
	0x57a0, 0x09,
	0x57a1, 0x40,
	0x366d, 0x00,
	0x5003, 0xc8,
	0x5006, 0x00,
	0x5007, 0x00,
	0x5e10, 0xfc,
};

kal_uint16 addr_data_pair_vga_setting_120fps_ov8856[] = {
			0x3501, 0x25,
			0x3502, 0xc0,
			0x366e, 0x08,
			0x3714, 0x27,
			0x37c2, 0x34,
			0x3800, 0x01,
			0x3801, 0x50,
			0x3802, 0x01,
			0x3803, 0x10,
			0x3804, 0x0b,
			0x3805, 0x8f,
			0x3806, 0x08,
			0x3807, 0x9f,
			0x3808, 0x02,
			0x3809, 0x80,
			0x380a, 0x01,
			0x380b, 0xe0,
			0x380c, 0x07,
			0x380d, 0x8c,
			0x380e, 0x02,
			0x380f, 0x6c,
			0x3810, 0x00,
			0x3811, 0x07,
			0x3812, 0x00,
			0x3813, 0x03,
			0x3814, 0x07,
			0x3815, 0x01,
			0x3820, 0x90,
			0x3821, 0x67,
/*improve the normal luminance differences new add for set back to default*/
			0x4502, 0x50,
			0x382a, 0x07,
			0x4009, 0x05,
			0x4601, 0x40,
			0x5795, 0x00,
			0x5796, 0x10,
			0x5797, 0x10,
			0x5798, 0x73,
			0x5799, 0x73,
			0x579a, 0x00,
			0x579b, 0x00,
			0x579c, 0x00,
			0x579d, 0x00,
			0x579e, 0x05,
			0x579f, 0xa0,
			0x57a0, 0x03,
			0x57a1, 0x20,
			0x366d, 0x11,
			0x5003, 0xc0,
			0x5006, 0x02,
			0x5007, 0x90,
			0x5e10, 0x7c,
};
enum IMGSENSOR_MODE {
	IMGSENSOR_MODE_INIT,
	IMGSENSOR_MODE_PREVIEW,
	IMGSENSOR_MODE_CAPTURE,
	IMGSENSOR_MODE_VIDEO,
	IMGSENSOR_MODE_HIGH_SPEED_VIDEO,
	IMGSENSOR_MODE_SLIM_VIDEO,
};


struct imgsensor_mode_struct {
	kal_uint32 pclk;
	kal_uint32 linelength;
	kal_uint32 framelength;
	kal_uint8 startx;
	kal_uint8 starty;

	kal_uint16 grabwindow_width;
	kal_uint16 grabwindow_height;

	/* following for MIPIDataLowPwr2HighSpeedSettleDelayCount
	 * by different scenario
	 */
	kal_uint8 mipi_data_lp2hs_settle_dc;

	/*	 following for GetDefaultFramerateByScenario()	*/
	kal_uint16 max_framerate;
	kal_uint32 mipi_pixel_rate;
};


/* SENSOR PRIVATE STRUCT FOR VARIABLES*/
struct imgsensor_struct {
	kal_uint8 mirror;		/*mirrorflip information*/

	kal_uint8 sensor_mode;		/*record IMGSENSOR_MODE enum value*/

	kal_uint32 shutter;		/*current shutter*/
	kal_uint16 gain;		/*current gain*/

	kal_uint32 pclk;			/*current pclk*/

	kal_uint32 frame_length;		/*current framelength*/
	kal_uint32 line_length;			/*current linelength*/

	/*current min  framelength to max framerate*/
	kal_uint32 min_frame_length;

	kal_uint16 dummy_pixel;			/*current dummypixel*/
	kal_uint16 dummy_line;			/*current dummline*/

	kal_uint16 current_fps;		/*current max fps*/
	kal_bool   autoflicker_en;	/*record autoflicker enable or disable*/
	kal_bool test_pattern;		/*record test pattern mode or not*/
	enum MSDK_SCENARIO_ID_ENUM current_scenario_id; /*current scenario id*/
	kal_uint8  ihdr_en;		/*ihdr enable or disable*/

	kal_uint8 i2c_write_id;		/*record current sensor's i2c write id*/
};

/* SENSOR PRIVATE STRUCT FOR CONSTANT*/
struct imgsensor_info_struct {
	kal_uint16 sensor_id;	/*record sensor id defined in Kd_imgsensor.h*/
	kal_uint32 checksum_value;	/*checksum value for Camera Auto Test*/

	/*preview scenario relative information*/
	struct imgsensor_mode_struct pre;
	/*capture scenario relative information*/
	struct imgsensor_mode_struct cap;

	struct imgsensor_mode_struct cap1;
	/* capture for PIP 24fps relative information,
	 * capture1 mode must use same framelength,
	 * linelength with Capture mode for shutter calculate
	 */

	/*normal video	scenario relative information*/
	struct imgsensor_mode_struct normal_video;

	/*high speed video scenario relative information*/
	struct imgsensor_mode_struct hs_video;

	/*slim video for VT scenario relative information*/
	struct imgsensor_mode_struct slim_video;

	kal_uint8  ae_shut_delay_frame;	/*shutter delay frame for AE cycle*/

	/*sensor gain delay frame for AE cycle*/
	kal_uint8  ae_sensor_gain_delay_frame;

	kal_uint8  ae_ispGain_delay_frame; /*isp gain delay frame for AE cycle*/
	kal_uint8  ihdr_support;	/*1, support; 0,not support*/
	kal_uint8  ihdr_le_firstline;	/*1,le first ; 0, se first*/
	kal_uint8  sensor_mode_num;	/*support sensor mode num*/

	kal_uint8  cap_delay_frame;	/*enter capture delay frame num*/
	kal_uint8  pre_delay_frame;	/*enter preview delay frame num*/
	kal_uint8  video_delay_frame;	/*enter video delay frame num*/

	/*enter high speed video  delay frame num*/
	kal_uint8  hs_video_delay_frame;

	/*enter slim video delay frame num*/
	kal_uint8  slim_video_delay_frame;

	kal_uint8  margin;	/*sensor framelength & shutter margin */
	kal_uint32 min_shutter;			/*min shutter*/

	/*max framelength by sensor register's limitation*/
	kal_uint32 max_frame_length;
	kal_uint8  isp_driving_current;	/*clk driving current*/
	kal_uint8  sensor_interface_type;/*sensor_interface_type*/

	/* 0,MIPI_OPHY_NCSI2; 1,MIPI_OPHY_CSI2,
	 * default is NCSI2, don't modify this para
	 */
	kal_uint8  mipi_sensor_type;
	kal_uint8  mipi_settle_delay_mode;
	/*0, high speed signal auto detect; 1, use settle delay,unit is ns,
	 *default is auto detect, don't modify this para
	 */
	kal_uint8  sensor_output_dataformat;/*sensor output first pixel color*/
	kal_uint8  mclk; /*mclk value, suggest 24 or 26 for 24Mhz or 26Mhz*/
	kal_uint32 i2c_speed;
	kal_uint8  mipi_lane_num;		/*mipi lane num*/

	/*record sensor support all write id addr,
	 * only supprt 4must end with 0xff
	 */
	kal_uint8  i2c_addr_table[5];
};

enum OV8856_VERSION {
	OV8856R2A,
	OV8856R1A
};

enum OV8856_VERSION ov8856version = OV8856R1A;


extern int iReadRegI2C(u8 *a_pSendData, u16 a_sizeSendData,
			u8 *a_pRecvData, u16 a_sizeRecvData, u16 i2cId);

extern int iWriteRegI2C(u8 *a_pSendData, u16 a_sizeSendData, u16 i2cId);

extern int iBurstWriteReg_multi(u8 *pData, u32 bytes, u16 i2cId,
			u16 transfer_length, u16 timing);
#endif
